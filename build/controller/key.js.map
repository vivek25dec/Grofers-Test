{"version":3,"sources":["../../src/controller/key.js"],"names":["fetchKeyByID","req","res","key","params","e","message","ERROR_MESSAGE","NOT_FOUND_KEY","Key","findOne","result","upsertKeyValue","body","value","KEY_FIELD_MISSING","query","data","findOneAndUpdate","upsert","ERROR_UPSERT_KEY","response"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACO,IAAMA;AAAA,qEAAe,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGtBC,eAHsB,GAIpBF,IAAIG,MAJgB,CAGtBD,GAHsB;;AAMxB;;AANwB,gBAOnBA,GAPmB;AAAA;AAAA;AAAA;;AAQhBE,aARgB,GAQZ;AACRC,uBAASC,qBAAcC;AADf,aARY;AAAA,6CAWf,kBAAMN,GAAN,EAAWG,CAAX,CAXe;;AAAA;AAAA;AAAA,mBAcHI,YAAIC,OAAJ,CAAY,EAACP,QAAD,EAAZ,CAdG;;AAAA;AAclBQ,kBAdkB;;AAAA,gBAiBnBA,MAjBmB;AAAA;AAAA;AAAA;;AAkBhBN,cAlBgB,GAkBZ;AACRC,uBAASC,qBAAcC;AADf,aAlBY;AAAA,6CAqBf,kBAAMN,GAAN,EAAWG,EAAX,CArBe;;AAAA;AAAA,6CAwBjB,oBAAQH,GAAR,EAAaS,MAAb,CAxBiB;;AAAA;AAAA;AAAA;AA0BlBN,eA1BkB,GA0Bd;AACRC,uBAAS,YAAMA;AADP,aA1Bc;AAAA,6CA6BjB,YAAMJ,GAAN,EAAWG,GAAX,CA7BiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAiCP;AACO,IAAMO;AAAA,sEAAiB,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKtBD,IAAIY,IALkB,EAGxBV,GAHwB,aAGxBA,GAHwB,EAIxBW,KAJwB,aAIxBA,KAJwB;;AAO1B;;AAP0B,kBAQtB,CAACX,GAAD,IAAQ,CAACW,KARa;AAAA;AAAA;AAAA;;AASlBT,aATkB,GASd;AACRC,uBAASC,qBAAcQ;AADf,aATc;AAAA,8CAYjB,kBAAMb,GAAN,EAAWG,CAAX,CAZiB;;AAAA;AAepBW,iBAfoB,GAeZ,EAACb,QAAD,EAfY;AAgBpBc,gBAhBoB,GAgBb;AACXd,sBADW;AAEXW;AAFW,aAhBa;AAAA;AAAA,mBAoBLL,YAAIS,gBAAJ,CAAqBF,KAArB,EAA4BC,IAA5B,EAAkC,EAACE,QAAQ,IAAT,EAAlC,CApBK;;AAAA;AAoBpBR,kBApBoB;;AAAA,gBAqBrBA,MArBqB;AAAA;AAAA;AAAA;;AAsBlBN,eAtBkB,GAsBd;AACRC,uBAASC,qBAAca;AADf,aAtBc;AAAA,8CAyBjB,kBAAMlB,GAAN,EAAWG,GAAX,CAzBiB;;AAAA;AA4BpBgB,oBA5BoB,GA4BT;AACff,uBAAS;AADM,aA5BS;AAAA,8CA+BnB,oBAAQJ,GAAR,EAAamB,QAAb,CA/BmB;;AAAA;AAAA;AAAA;AAiCpBhB,eAjCoB,GAiChB;AACRC,uBAAS,aAAMA;AADP,aAjCgB;AAAA,8CAoCnB,aAAMJ,GAAN,EAAWG,GAAX,CApCmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"key.js","sourcesContent":["import { Key } from '../models'\nimport { success, error, ERROR_MESSAGE } from '../utils'\n\n// This method is used to fetch the key value by its key name\nexport const fetchKeyByID = async (req, res) => {\n  try {\n    const {\n      key,\n    } = req.params\n\n    // Check if the key is present in the query params\n    if (!key) {\n      const e = {\n        message: ERROR_MESSAGE.NOT_FOUND_KEY,\n      }\n      return error(res, e)\n    }\n    // Query the DB with the key to get all the information\n    const result = await Key.findOne({key})\n\n    // Show Error if the Key is not found\n    if (!result) {\n      const e = {\n        message: ERROR_MESSAGE.NOT_FOUND_KEY,\n      }\n      return error(res, e)\n    }\n\n    return success(res, result)\n  } catch (error) {\n    const e = {\n      message: error.message,\n    }\n    return error(res, e)\n  }\n}\n\n// This function is used to upsert key value\nexport const upsertKeyValue = async (req, res) => {\n  try {\n    const {\n      key,\n      value\n    } = req.body\n\n    // This will check if both key and value is present\n    if (!key || !value) {\n      const e = {\n        message: ERROR_MESSAGE.KEY_FIELD_MISSING,\n      }\n      return error(res, e)\n    }\n\n    const query = {key}\n    const data = {\n      key,\n      value,\n    }\n    const result = await Key.findOneAndUpdate(query, data, {upsert: true})\n    if (!result) {\n      const e = {\n        message: ERROR_MESSAGE.ERROR_UPSERT_KEY,\n      }\n      return error(res, e)\n    }\n\n    const response = {\n      message: \"Stored Successfully\"\n    }\n    return success(res, response)\n  } catch (error) {\n    const e = {\n      message: error.message,\n    }\n    return error(res, e)\n  }\n}\n"]}