{"version":3,"sources":["../../src/bin/www.js"],"names":["debug","normalizePort","port","parseInt","val","isNaN","process","env","PORT","app","set","server","http","createServer","onError","error","syscall","bind","code","console","exit","onListening","addr","address","listen","on"],"mappings":";;AAKA;;AACA;;;;AACA;;;;AACA;;;;;;AANA;;;AAQA,IAAMA,QAAQ,qBAAE,wBAAF,CAAd;;AAEA;;;;AAIA,IAAMC,gBAAgB,SAAhBA,aAAgB,MAAO;AAC3B,MAAMC,OAAOC,SAASC,GAAT,EAAc,EAAd,CAAb;;AAEA,MAAIC,MAAMH,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOE,GAAP;AACD;;AAED,MAAIF,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CAdD;;AAgBA;;;;AAIA,IAAMA,OAAOD,cAAcK,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAb;AACAC,cAAIC,GAAJ,CAAQ,MAAR,EAAgBR,IAAhB;;AAEA;;;;AAIA,IAAMS,SAASC,eAAKC,YAAL,CAAkBJ,aAAlB,CAAf;;AAEA;;;;AAIA,IAAMK,UAAU,SAAVA,OAAU,QAAS;AACvB,MAAIC,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAME,OAAO,OAAOf,IAAP,KAAgB,QAAhB,aACDA,IADC,aAEDA,IAFZ;;AAIA;AACA,UAAQa,MAAMG,IAAd;AACE,SAAK,QAAL;AACEC,cAAQJ,KAAR,CAAiBE,IAAjB;AACAX,cAAQc,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACED,cAAQJ,KAAR,CAAiBE,IAAjB;AACAX,cAAQc,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAML,KAAN;AAVJ;AAYD,CAtBD;;AAwBA;;;;AAIA,IAAMM,cAAc,SAAdA,WAAc,GAAM;AACxB,MAAMC,OAAOX,OAAOY,OAAP,EAAb;AACA,MAAMN,OAAO,OAAOK,IAAP,KAAgB,QAAhB,aACDA,IADC,YAEFA,KAAKpB,IAFhB;AAGAF,0BAAsBiB,IAAtB;AACD,CAND;;AAQAN,OAAOa,MAAP,CAActB,IAAd;AACAS,OAAOc,EAAP,CAAU,OAAV,EAAmBX,OAAnB;AACAH,OAAOc,EAAP,CAAU,WAAV,EAAuBJ,WAAvB","file":"www.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\nimport \"regenerator-runtime/runtime.js\"\nimport d from 'debug'\nimport http from 'http'\nimport app from '../app'\n\nconst debug = d('nodestartercode:server')\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nconst normalizePort = val => {\n  const port = parseInt(val, 10)\n\n  if (isNaN(port)) {\n    // named pipe\n    return val\n  }\n\n  if (port >= 0) {\n    // port number\n    return port\n  }\n\n  return false\n}\n\n/**\n * Get port from environment and store in Express.\n */\n\nconst port = normalizePort(process.env.PORT || '3000')\napp.set('port', port)\n\n/**\n * Create HTTP server.\n */\n\nconst server = http.createServer(app)\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nconst onError = error => {\n  if (error.syscall !== 'listen') {\n    throw error\n  }\n\n  const bind = typeof port === 'string'\n    ? `Pipe ${port}`\n    : `Port ${port}`\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(`${bind} requires elevated privileges`)\n      process.exit(1)\n      break\n    case 'EADDRINUSE':\n      console.error(`${bind} is already in use`)\n      process.exit(1)\n      break\n    default:\n      throw error\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nconst onListening = () => {\n  const addr = server.address()\n  const bind = typeof addr === 'string'\n    ? `pipe ${addr}`\n    : `port${addr.port}`\n  debug(`Listening on ${bind}`)\n}\n\nserver.listen(port)\nserver.on('error', onError)\nserver.on('listening', onListening)"]}